function Banner(){this.bannerWidth=798,this.bannerGroup=$("#banner-group"),this.index=1,this.leftArrow=$(".left-arrow"),this.rightArrow=$(".right-arrow"),this.bannerUl=$("#banner-ul"),this.liList=this.bannerUl.children("li"),this.bannerCount=this.liList.length,this.pageControl=$(".page-control")}function Index(){var n=this;n.page=2,n.category_id=0,n.loadBtn=$("#load-more-btn"),template.defaults.imports.timeSince=function(n){var e=new Date(n).getTime(),t=((new Date).getTime()-e)/1e3;return t<60?"刚刚":60<=t&&t<3600?(minutes=parseInt(t/60),minutes+"分钟前"):3600<=t&&t<86400?(hours=parseInt(t/60/60),hours+"小时前"):86400<=t&&t<2592e3?(days=parseInt(t/60/60/24),days+"天前"):value.strftime("%Y/%m/%d %H:%M")}}Banner.prototype.initBanner=function(){var n=this,e=n.liList.eq(0).clone(),t=n.liList.eq(n.bannerCount-1).clone();n.bannerUl.append(e),n.bannerUl.prepend(t),n.bannerUl.css({width:n.bannerWidth*(n.bannerCount+2),left:-n.bannerWidth})},Banner.prototype.initPageControl=function(){for(var n=this,e=0;e<n.bannerCount;e++){var t=$("<li></li>");n.pageControl.append(t),0===e&&t.addClass("active")}n.pageControl.css({width:12*n.bannerCount+16+16*(n.bannerCount-1)})},Banner.prototype.toggleArrow=function(n){var e=this;n?(e.leftArrow.show(),e.rightArrow.show()):(e.leftArrow.hide(),e.rightArrow.hide())},Banner.prototype.animate=function(){var n=this;n.bannerUl.animate({left:-798*n.index},500);var e=n.index;e=0===e?n.bannerCount-1:e===n.bannerCount+1?0:n.index-1,n.pageControl.children("li").eq(e).addClass("active").siblings().removeClass("active")},Banner.prototype.loop=function(){var n=this;this.timer=setInterval(function(){n.index>=n.bannerCount+1?(n.bannerUl.css({left:-n.bannerWidth}),n.index=2):n.index++,n.animate()},2e3)},Banner.prototype.listenArrowClick=function(){var n=this;n.leftArrow.click(function(){0===n.index?(n.bannerUl.css({left:-n.bannerCount*n.bannerWidth}),n.index=n.bannerCount-1):n.index--,n.animate()}),n.rightArrow.click(function(){n.index===n.bannerCount+1?(n.bannerUl.css({left:-n.bannerWidth}),n.index=2):n.index++,n.animate()})},Banner.prototype.listenBannerHover=function(){var n=this;this.bannerGroup.hover(function(){clearInterval(n.timer),n.toggleArrow(!0)},function(){n.loop(),n.toggleArrow(!1)})},Banner.prototype.listenPageControl=function(){var t=this;t.pageControl.children("li").each(function(n,e){$(e).click(function(){t.index=n,t.animate()})})},Banner.prototype.run=function(){this.initBanner(),this.initPageControl(),this.loop(),this.listenBannerHover(),this.listenArrowClick(),this.listenPageControl()};var page=2,category_id=0;Index.prototype.Listenmore=function(){var i=$(".load-more");i.click(function(){xfzajax.get({url:"/news_list/",data:{p:page,category_id:category_id},success:function(n){if(200===n.code){var e=n.data;if(0<e.length){var t=template("news-item",{newses:e});$(".list-inner-group").append(t),page+=1,console.log(page)}else i.hide()}}})})},Index.prototype.ListenActiveSwitch=function(){$(".list-tab").children().click(function(){var r=$(this),a=r.attr("data-category");page=1,xfzajax.get({url:"/news_list",data:{category_id:a,p:page},success:function(n){if(200===n.code){var e=n.data,t=template("news-item",{newses:e}),i=$(".list-inner-group");i.empty(),i.append(t),page=2,category_id=a,r.addClass("active").siblings().removeClass("active"),$(".load-more").show()}}})})},Index.prototype.run=function(){this.Listenmore(),this.ListenActiveSwitch()},$(function(){(new Banner).run(),(new Index).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIkJhbm5lciIsInRoaXMiLCJiYW5uZXJXaWR0aCIsImJhbm5lckdyb3VwIiwiJCIsImluZGV4IiwibGVmdEFycm93IiwicmlnaHRBcnJvdyIsImJhbm5lclVsIiwibGlMaXN0IiwiY2hpbGRyZW4iLCJiYW5uZXJDb3VudCIsImxlbmd0aCIsInBhZ2VDb250cm9sIiwiSW5kZXgiLCJzZWxmIiwicGFnZSIsImNhdGVnb3J5X2lkIiwibG9hZEJ0biIsInRlbXBsYXRlIiwiZGVmYXVsdHMiLCJpbXBvcnRzIiwidGltZVNpbmNlIiwiZGF0ZVZhbHVlIiwiZGF0ZXRzIiwiRGF0ZSIsImdldFRpbWUiLCJ0aW1lc3RhbXAiLCJtaW51dGVzIiwicGFyc2VJbnQiLCJob3VycyIsImRheXMiLCJ2YWx1ZSIsInN0cmZ0aW1lIiwicHJvdG90eXBlIiwiaW5pdEJhbm5lciIsImZpcnN0QmFubmVyIiwiZXEiLCJjbG9uZSIsImxhc3RCYW5uZXIiLCJhcHBlbmQiLCJwcmVwZW5kIiwiY3NzIiwid2lkdGgiLCJsZWZ0IiwiaW5pdFBhZ2VDb250cm9sIiwiaSIsImNpcmNsZSIsImFkZENsYXNzIiwidG9nZ2xlQXJyb3ciLCJpc1Nob3ciLCJzaG93IiwiaGlkZSIsImFuaW1hdGUiLCJzaWJsaW5ncyIsInJlbW92ZUNsYXNzIiwibG9vcCIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJsaXN0ZW5BcnJvd0NsaWNrIiwiY2xpY2siLCJsaXN0ZW5CYW5uZXJIb3ZlciIsImhvdmVyIiwiY2xlYXJJbnRlcnZhbCIsImxpc3RlblBhZ2VDb250cm9sIiwiZWFjaCIsIm9iaiIsInJ1biIsIkxpc3Rlbm1vcmUiLCJtb3JlbWVzc2FnZSIsInhmemFqYXgiLCJnZXQiLCJ1cmwiLCJkYXRhIiwicCIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJuZXdzIiwidHBsIiwibmV3c2VzIiwiY29uc29sZSIsImxvZyIsIkxpc3RlbkFjdGl2ZVN3aXRjaCIsImxpIiwiY2F0ZWdvcnlf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ZFUsUUFBUUMsSUFBSSxDQUNKQyxJQUFPLGNBQ1BDLEtBQVEsQ0FDSkMsRUFBSzFELEtBQ0xDLFlBQWNBLGFBR2xCMEQsUUFBVyxTQUFVQyxHQUNqQixHQUF1QixNQUFuQkEsRUFBYSxLQUFXLENBQ3hCLElBQUlDLEVBQU9ELEVBQWEsS0FDeEIsR0FBZ0IsRUFBWkMsRUFBS2pFLE9BQVMsQ0FDVCxJQUFJa0UsRUFBTTNELFNBQVMsWUFBWSxDQUFDNEQsT0FBU0YsSUFDaEN6RSxFQUFFLHFCQUNSb0MsT0FBT3NDLEdBQ1Y5RCxNQUFNLEVBQ05nRSxRQUFRQyxJQUFJakUsV0FFakJxRCxFQUFZakIsY0FVeEN0QyxNQUFNb0IsVUFBVWdELG1CQUFxQixXQUVyQjlFLEVBQUUsYUFDUk0sV0FBV2tELE1BQU0sV0FDbkIsSUFBSXVCLEVBQUsvRSxFQUFFSCxNQUNQbUYsRUFBZUQsRUFBR0UsS0FBSyxpQkFDM0JyRSxLQUFPLEVBQ1BzRCxRQUFRQyxJQUFJLENBQ1JDLElBQU0sYUFDTkMsS0FBTyxDQUNEeEQsWUFBY21FLEVBQ2RWLEVBQUkxRCxNQUVWMkQsUUFBVSxTQUFVQyxHQUNoQixHQUFxQixNQUFqQkEsRUFBYSxLQUFRLENBQ25CLElBQUlDLEVBQU9ELEVBQWEsS0FDcEJFLEVBQU0zRCxTQUFTLFlBQVksQ0FBQzRELE9BQVNGLElBQ3JDUyxFQUFnQmxGLEVBQUUscUJBQ3RCa0YsRUFBY0MsUUFDZEQsRUFBYzlDLE9BQU9zQyxHQUNyQjlELEtBQUssRUFDTEMsWUFBWW1FLEVBQ1pELEVBQUduQyxTQUFTLFVBQVVNLFdBQVdDLFlBQVksVUFDM0JuRCxFQUFFLGNBQ1IrQyxjQVFsQ3JDLE1BQU1vQixVQUFVaUMsSUFBTSxXQUNsQmxFLEtBQUttRSxhQUNMbkUsS0FBS2lGLHNCQUdUOUUsRUFBRSxZQUNlLElBQUlKLFFBQ1ZtRSxPQUNLLElBQUlyRCxPQUNWcUQiLCJmaWxlIjoiaW5kZXgubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8g6Z2i5ZCR5a+56LGhXHJcbi8vIDEuIOa3u+WKoOWxnuaAp1xyXG4vLyDpgJrov4d0aGlz5YWz6ZSu5a2X77yM57uR5a6a5bGe5oCn77yM5bm25LiU5oyH5a6a5LuW55qE5YC844CCXHJcbi8vIOWOn+Wei+mTvlxyXG4vLyAyLiDmt7vliqDmlrnms5VcclxuLy8g5ZyoQmFubmVyLnByb3RvdHlwZeS4iue7keWumuaWueazleWwseWPr+S7peS6huOAglxyXG5cclxuLy8gZnVuY3Rpb24gQmFubmVyKCkge1xyXG4vLyAgICAgLy8g6L+Z5Liq6YeM6Z2i5YaZ55qE5Luj56CBXHJcbi8vICAgICAvLyDnm7jlvZPkuo7mmK9QeXRob27kuK3nmoRfX2luaXRfX+aWueazleeahOS7o+eggVxyXG4vLyAgICAgY29uc29sZS5sb2coJ+aehOmAoOWHveaVsCcpO1xyXG4vLyAgICAgdGhpcy5wZXJzb24gPSAnemhpbGlhbyc7XHJcbi8vIH1cclxuLy9cclxuLy8gQmFubmVyLnByb3RvdHlwZS5ncmVldCA9IGZ1bmN0aW9uICh3b3JkKSB7XHJcbi8vICAgICBjb25zb2xlLmxvZygnaGVsbG8gJyx3b3JkKTtcclxuLy8gfTtcclxuLy9cclxuLy8gdmFyIGJhbm5lciA9IG5ldyBCYW5uZXIoKTtcclxuLy8gY29uc29sZS5sb2coYmFubmVyLnBlcnNvbik7XHJcbi8vIGJhbm5lci5ncmVldCgnemhpbGlhbycpO1xyXG5cclxuZnVuY3Rpb24gQmFubmVyKCkge1xyXG4gICAgdGhpcy5iYW5uZXJXaWR0aCA9IDc5ODtcclxuICAgIHRoaXMuYmFubmVyR3JvdXAgPSAkKFwiI2Jhbm5lci1ncm91cFwiKTtcclxuICAgIHRoaXMuaW5kZXggPSAxO1xyXG4gICAgdGhpcy5sZWZ0QXJyb3cgPSAkKFwiLmxlZnQtYXJyb3dcIik7XHJcbiAgICB0aGlzLnJpZ2h0QXJyb3cgPSAkKFwiLnJpZ2h0LWFycm93XCIpO1xyXG4gICAgdGhpcy5iYW5uZXJVbCA9ICQoXCIjYmFubmVyLXVsXCIpO1xyXG4gICAgdGhpcy5saUxpc3QgPSB0aGlzLmJhbm5lclVsLmNoaWxkcmVuKFwibGlcIik7XHJcbiAgICB0aGlzLmJhbm5lckNvdW50ID0gdGhpcy5saUxpc3QubGVuZ3RoO1xyXG4gICAgdGhpcy5wYWdlQ29udHJvbCA9ICQoXCIucGFnZS1jb250cm9sXCIpO1xyXG59XHJcblxyXG5CYW5uZXIucHJvdG90eXBlLmluaXRCYW5uZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICB2YXIgZmlyc3RCYW5uZXIgPSBzZWxmLmxpTGlzdC5lcSgwKS5jbG9uZSgpO1xyXG4gICAgdmFyIGxhc3RCYW5uZXIgPSBzZWxmLmxpTGlzdC5lcShzZWxmLmJhbm5lckNvdW50LTEpLmNsb25lKCk7XHJcbiAgICBzZWxmLmJhbm5lclVsLmFwcGVuZChmaXJzdEJhbm5lcik7XHJcbiAgICBzZWxmLmJhbm5lclVsLnByZXBlbmQobGFzdEJhbm5lcik7XHJcbiAgICBzZWxmLmJhbm5lclVsLmNzcyh7XCJ3aWR0aFwiOnNlbGYuYmFubmVyV2lkdGgqKHNlbGYuYmFubmVyQ291bnQrMiksJ2xlZnQnOi1zZWxmLmJhbm5lcldpZHRofSk7XHJcbn07XHJcblxyXG5CYW5uZXIucHJvdG90eXBlLmluaXRQYWdlQ29udHJvbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIGZvcih2YXIgaT0wOyBpPHNlbGYuYmFubmVyQ291bnQ7IGkrKyl7XHJcbiAgICAgICAgdmFyIGNpcmNsZSA9ICQoXCI8bGk+PC9saT5cIik7XHJcbiAgICAgICAgc2VsZi5wYWdlQ29udHJvbC5hcHBlbmQoY2lyY2xlKTtcclxuICAgICAgICBpZihpID09PSAwKXtcclxuICAgICAgICAgICAgY2lyY2xlLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNlbGYucGFnZUNvbnRyb2wuY3NzKHtcIndpZHRoXCI6c2VsZi5iYW5uZXJDb3VudCoxMis4KjIrMTYqKHNlbGYuYmFubmVyQ291bnQtMSl9KTtcclxufTtcclxuXHJcbkJhbm5lci5wcm90b3R5cGUudG9nZ2xlQXJyb3cgPSBmdW5jdGlvbiAoaXNTaG93KSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBpZihpc1Nob3cpe1xyXG4gICAgICAgIHNlbGYubGVmdEFycm93LnNob3coKTtcclxuICAgICAgICBzZWxmLnJpZ2h0QXJyb3cuc2hvdygpO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgc2VsZi5sZWZ0QXJyb3cuaGlkZSgpO1xyXG4gICAgICAgIHNlbGYucmlnaHRBcnJvdy5oaWRlKCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5CYW5uZXIucHJvdG90eXBlLmFuaW1hdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLmJhbm5lclVsLmFuaW1hdGUoe1wibGVmdFwiOi03OTgqc2VsZi5pbmRleH0sNTAwKTtcclxuICAgIHZhciBpbmRleCA9IHNlbGYuaW5kZXg7XHJcbiAgICBpZihpbmRleCA9PT0gMCl7XHJcbiAgICAgICAgaW5kZXggPSBzZWxmLmJhbm5lckNvdW50LTE7XHJcbiAgICB9ZWxzZSBpZihpbmRleCA9PT0gc2VsZi5iYW5uZXJDb3VudCsxKXtcclxuICAgICAgICBpbmRleCA9IDA7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgICBpbmRleCA9IHNlbGYuaW5kZXggLSAxO1xyXG4gICAgfVxyXG4gICAgc2VsZi5wYWdlQ29udHJvbC5jaGlsZHJlbignbGknKS5lcShpbmRleCkuYWRkQ2xhc3MoXCJhY3RpdmVcIikuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbn07XHJcblxyXG5CYW5uZXIucHJvdG90eXBlLmxvb3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmKHNlbGYuaW5kZXggPj0gc2VsZi5iYW5uZXJDb3VudCsxKXtcclxuICAgICAgICAgICAgc2VsZi5iYW5uZXJVbC5jc3Moe1wibGVmdFwiOi1zZWxmLmJhbm5lcldpZHRofSk7XHJcbiAgICAgICAgICAgIHNlbGYuaW5kZXggPSAyO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBzZWxmLmluZGV4Kys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNlbGYuYW5pbWF0ZSgpO1xyXG4gICAgfSwyMDAwKTtcclxufTtcclxuXHJcblxyXG5CYW5uZXIucHJvdG90eXBlLmxpc3RlbkFycm93Q2xpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLmxlZnRBcnJvdy5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYoc2VsZi5pbmRleCA9PT0gMCl7XHJcbiAgICAgICAgICAgIC8vID0977yaMSA9PSAnMSfvvJp0cnVlXHJcbiAgICAgICAgICAgIC8vID09PT0gMSAhPSAnMSdcclxuICAgICAgICAgICAgc2VsZi5iYW5uZXJVbC5jc3Moe1wibGVmdFwiOi1zZWxmLmJhbm5lckNvdW50KnNlbGYuYmFubmVyV2lkdGh9KTtcclxuICAgICAgICAgICAgc2VsZi5pbmRleCA9IHNlbGYuYmFubmVyQ291bnQgLSAxO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBzZWxmLmluZGV4LS07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNlbGYuYW5pbWF0ZSgpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHNlbGYucmlnaHRBcnJvdy5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYoc2VsZi5pbmRleCA9PT0gc2VsZi5iYW5uZXJDb3VudCArIDEpe1xyXG4gICAgICAgICAgICBzZWxmLmJhbm5lclVsLmNzcyh7XCJsZWZ0XCI6LXNlbGYuYmFubmVyV2lkdGh9KTtcclxuICAgICAgICAgICAgc2VsZi5pbmRleCA9IDI7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHNlbGYuaW5kZXgrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgc2VsZi5hbmltYXRlKCk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbkJhbm5lci5wcm90b3R5cGUubGlzdGVuQmFubmVySG92ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICB0aGlzLmJhbm5lckdyb3VwLmhvdmVyKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyDnrKzkuIDkuKrlh73mlbDmmK/vvIzmiorpvKDmoIfnp7vliqjliLBiYW5uZXLkuIrkvJrmiafooYznmoTlh73mlbBcclxuICAgICAgICBjbGVhckludGVydmFsKHNlbGYudGltZXIpO1xyXG4gICAgICAgIHNlbGYudG9nZ2xlQXJyb3codHJ1ZSk7XHJcbiAgICB9LGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyDnrKzkuozkuKrlh73mlbDmmK/vvIzmiorpvKDmoIfku45iYW5uZXLkuIrnp7votbDkvJrmiafooYznmoTlh73mlbBcclxuICAgICAgICBzZWxmLmxvb3AoKTtcclxuICAgICAgICBzZWxmLnRvZ2dsZUFycm93KGZhbHNlKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuQmFubmVyLnByb3RvdHlwZS5saXN0ZW5QYWdlQ29udHJvbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYucGFnZUNvbnRyb2wuY2hpbGRyZW4oXCJsaVwiKS5lYWNoKGZ1bmN0aW9uIChpbmRleCxvYmopIHtcclxuICAgICAgICAkKG9iaikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxmLmluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgICAgIHNlbGYuYW5pbWF0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5cclxuQmFubmVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmluaXRCYW5uZXIoKTtcclxuICAgIHRoaXMuaW5pdFBhZ2VDb250cm9sKCk7XHJcbiAgICB0aGlzLmxvb3AoKTtcclxuICAgIHRoaXMubGlzdGVuQmFubmVySG92ZXIoKTtcclxuICAgIHRoaXMubGlzdGVuQXJyb3dDbGljaygpO1xyXG4gICAgdGhpcy5saXN0ZW5QYWdlQ29udHJvbCgpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gSW5kZXgoKXtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYucGFnZSA9IDI7XHJcbiAgICBzZWxmLmNhdGVnb3J5X2lkID0gMDtcclxuICAgIHNlbGYubG9hZEJ0biA9ICQoXCIjbG9hZC1tb3JlLWJ0blwiKTtcclxuICAgIHRlbXBsYXRlLmRlZmF1bHRzLmltcG9ydHMudGltZVNpbmNlID0gZnVuY3Rpb24gKGRhdGVWYWx1ZSkge1xyXG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoZGF0ZVZhbHVlKTtcclxuICAgICAgICB2YXIgZGF0ZXRzID0gZGF0ZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgdmFyIG5vd3RzID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcclxuICAgICAgICB2YXIgdGltZXN0YW1wID0gKG5vd3RzIC0gZGF0ZXRzKS8xMDAwO1xyXG4gICAgaWYgKHRpbWVzdGFtcCA8IDYwKXtcclxuICAgICAgICAgIHJldHVybiAn5Yia5YiaJztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHRpbWVzdGFtcCA+PSA2MCAmJiB0aW1lc3RhbXAgPCA2MCo2MClcclxuICAgICAgICB7XHJcbiAgICAgICAgIG1pbnV0ZXMgPSBwYXJzZUludCh0aW1lc3RhbXAvNjApO1xyXG4gICAgICAgIHJldHVybiAgbWludXRlcysn5YiG6ZKf5YmNJztcclxuICAgICAgICB9XHJcblxyXG4gICAgZWxzZSBpZiAodGltZXN0YW1wID49IDYwKjYwICYmIHRpbWVzdGFtcCA8IDYwKjYwKjI0KVxyXG4gICAgICAgIHtcclxuICAgICAgICBob3VycyA9IHBhcnNlSW50KHRpbWVzdGFtcC82MC82MCk7XHJcbiAgICAgICAgcmV0dXJuIGhvdXJzKyflsI/ml7bliY0nXHJcbiAgICAgICAgfVxyXG5cclxuICAgIGVsc2UgaWYgKHRpbWVzdGFtcCA+PSA2MCo2MCoyNCAmJiB0aW1lc3RhbXAgPCA2MCo2MCoyNCozMCl7XHJcbiAgICAgICAgICAgIGRheXMgPSBwYXJzZUludCh0aW1lc3RhbXAvNjAvNjAvMjQpXHJcbiAgICAgICAgcmV0dXJuICBkYXlzKyflpKnliY0nXHJcbiAgICAgICAgfVxyXG5cclxuICAgIGVsc2V7XHJcbiAgICAgICAgIHJldHVybiB2YWx1ZS5zdHJmdGltZShcIiVZLyVtLyVkICVIOiVNXCIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbnZhciBwYWdlPTI7XHJcbnZhciBjYXRlZ29yeV9pZD0wO1xyXG5JbmRleC5wcm90b3R5cGUuTGlzdGVubW9yZT1mdW5jdGlvbigpe1xyXG4gICAgdmFyIG1vcmVtZXNzYWdlID0gJCgnLmxvYWQtbW9yZScpO1xyXG4gICAgbW9yZW1lc3NhZ2UuY2xpY2soZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB4ZnphamF4LmdldCh7XHJcbiAgICAgICAgICAgICAgICAndXJsJzogJy9uZXdzX2xpc3QvJyxcclxuICAgICAgICAgICAgICAgICdkYXRhJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICdwJzogcGFnZSxcclxuICAgICAgICAgICAgICAgICAgICAnY2F0ZWdvcnlfaWQnOmNhdGVnb3J5X2lkLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0Wydjb2RlJ10gPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3cyA9IHJlc3VsdFsnZGF0YSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3cy5sZW5ndGg+MCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cGwgPSB0ZW1wbGF0ZShcIm5ld3MtaXRlbVwiLHtcIm5ld3Nlc1wiOm5ld3N9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVsID0gJChcIi5saXN0LWlubmVyLWdyb3VwXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bC5hcHBlbmQodHBsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZSs9MTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocGFnZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZW1lc3NhZ2UuaGlkZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9KVxyXG59O1xyXG5cclxuSW5kZXgucHJvdG90eXBlLkxpc3RlbkFjdGl2ZVN3aXRjaCA9IGZ1bmN0aW9uKCl7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICB2YXIgR3JvdXAgPSAkKFwiLmxpc3QtdGFiXCIpO1xyXG4gICAgR3JvdXAuY2hpbGRyZW4oKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGxpID0gJCh0aGlzKTtcclxuICAgICAgICB2YXIgY2F0ZWdvcnlfaWRzID0gbGkuYXR0cignZGF0YS1jYXRlZ29yeScpO1xyXG4gICAgICAgIHBhZ2UgPSAxO1xyXG4gICAgICAgIHhmemFqYXguZ2V0KHtcclxuICAgICAgICAgICAgJ3VybCc6Jy9uZXdzX2xpc3QnLFxyXG4gICAgICAgICAgICAnZGF0YSc6e1xyXG4gICAgICAgICAgICAgICAgICAnY2F0ZWdvcnlfaWQnOmNhdGVnb3J5X2lkcyxcclxuICAgICAgICAgICAgICAgICAgJ3AnOnBhZ2UsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICdzdWNjZXNzJzpmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Wydjb2RlJ109PT0yMDApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld3MgPSByZXN1bHRbJ2RhdGEnXTtcclxuICAgICAgICAgICAgICAgICAgICAgIHZhciB0cGwgPSB0ZW1wbGF0ZShcIm5ld3MtaXRlbVwiLHtcIm5ld3Nlc1wiOm5ld3N9KTtcclxuICAgICAgICAgICAgICAgICAgICAgIHZhciBOZXJzTGlzdEdyb3VwID0gJCgnLmxpc3QtaW5uZXItZ3JvdXAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgIE5lcnNMaXN0R3JvdXAuZW1wdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgIE5lcnNMaXN0R3JvdXAuYXBwZW5kKHRwbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBwYWdlPTI7XHJcbiAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeV9pZD1jYXRlZ29yeV9pZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICBsaS5hZGRDbGFzcygnYWN0aXZlJykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgbW9yZW1lc3NhZ2UgPSAkKCcubG9hZC1tb3JlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBtb3JlbWVzc2FnZS5zaG93KClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG5JbmRleC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKXtcclxuICAgIHRoaXMuTGlzdGVubW9yZSgpO1xyXG4gICAgdGhpcy5MaXN0ZW5BY3RpdmVTd2l0Y2goKTtcclxufTtcclxuXHJcbiQoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGJhbm5lciA9IG5ldyBCYW5uZXIoKTtcclxuICAgIGJhbm5lci5ydW4oKTtcclxuICAgIHZhciBpbmRleCA9IG5ldyBJbmRleCgpO1xyXG4gICAgaW5kZXgucnVuKCk7XHJcbn0pOyJdfQ==
